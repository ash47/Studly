//LOGIN AND PROFILE

/api/session
    +GET, Get User Information for currently logged in user!
        return: {
            username: STRING,
            email: STRING,
            success: true
        }
    +POST, Login with a user

        args: {
            username: String,
            password: String
        }
    +DELETE logout
        -Logout
        -Error, 404 Session Not Found
        -Success, 200 Logged Out


/api/user
    +POST, Register
        args: {
            username: String,
            email: String,
            password: String,
            passwordRepeated: String
        },
        return: {
            username: STRING,
            email: STRING,
            success: true
        }
    -DELETE, deregisters logged in user
        args: {
            password: 'String'
        }

    +PUT, Update User Password (Updates User Object)
        args: {
            oldPassword: String,
            newPassword: String,
            newPasswordRepeated, String

        }
/api/user/:userId
    +GET, Gets public profile of userId
        return: {
            username: String,
        }
        //threads[]: {},
        //posts[]: {}

//CLASS PAGE!

/api/class/:weeklyClassID
    -+GET, Get a weekly class
        return: {
            classInfo: {
                name: "Web Information Technologies",
                subjectCode: "INFO30005",
                weeklyClasses: [
                    Sort,
                    Time,
                    etc..
                ],
                Directions:,
                Prerequisites:,
                },
            video : {
                slides[]:  String
                url: String
                },
            threads[] :
                {
                    topicID,
                    userID,
                    username,
                    title,
                    upVotes,
                    downVotes,
                    postTime
                }
        }
    +POST, add a thread
        args: {
            title: String,
            body: String
        }
    -PUT ?attendedFlag, attend a weekly class

        args : {
            attendedFlag: true,
        }
    -DELETE :ThreadId, delete a thread
        ADD A DELETED FLAG?

/api/class/:weeklyClassID/:topicID
    +POST, add a comment
        args: {
            content
        },
        return: {
            postID
        }
    -DELETE commentId, Remove a Comment
        ADD A DELETED FLAG?
    +GET, Get all comments for a thread
        return: []: {
            postID,
            userID,
            username,
            content,
            postTime
        }
    -PUT upvote or downvote, 1 for upvote 0 for delete vote -1 for down vote
        args: {
            vote: 1, 0 -1,
        }


//TIMETABLE PAGE

/api/timetable/

    -GET, get array of weekly classes in timetable for current week
        return : WeeklyClass[]: WeeklyClass

    -POST, add a class time to timetable
        args: classId

    -DELETE classId,
        return : delete a class time from timetable

    -PUT, Change from one classTime to another
        args: newClass: classId

        //// CONFUSING -- two different API calls to register into a time slot YES!

/api/timetable?date="String"
    +GET, get array of weekly classes for correspond week containing date
    return: {
        //Returns a list of subjects that the user is following
        subject[
            subjectCode
            subjectName
                classes [ //Return the classes that the user is registered on this subject
                    sort, // type of the class (lecture, workshop...)
                    classTimeID,
                    time,
                    day,
                    sisBuildingName,
                    buildingNumber,
                    roomNumber,
                    attended,
                    duration
                ]
            ]
    }

//SUBJECTS PAGE

/api/subject?query="String"
    +GET,  return array of like subjects
        return: {
            subjects[]: {
                subjectID,
                subjectName,
                semesterID,
                semesterName
            }
        }

/api/subject/:SubjectId
    +GET, return all classes for a subject
        return: {
            class[]: {
                classTimes[]: {
                    classTimeID:
                    Time:
                    Location:
                }
                sort
                duration
                subjectID
                classID
        }
/api/subject
    +POST, adds subject and time to timetable
        args: {
            subjectID,
            classTimes[]
        }
        return: {
            success: 1
        }

